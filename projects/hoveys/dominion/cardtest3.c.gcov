        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#define NOISY_TEST 1
        -:    9:
        1:   10:int main() {
        -:   11:
        -:   12:    //gcc -o cardtest3 cardtest3.c -g dominion.o rngs.o -Wall -fpic -coverage -lm -std=c99 
        1:   13:    int isTestPassed = 1;
        -:   14:    struct gameState Game, copyOfGame;
        1:   15:    int cardArray[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   16:                 sea_hag, tribute, smithy};
        -:   17:    int j, i, returnValue;
        1:   18:    int x = 1000;
        1:   19:    int numberOfPlayers = 2;
        1:   20:    int randSeed = 10000000;
        1:   21:    int handIndex = 0;
        1:   22:    int choice1 = 0, choice2 = 0, choice3 = 0;
        1:   23:    int bonus = 0;
        1:   24:    char bee[] = "\U0001F41D";
        1:   25:    char angery[] = "\U0001F608";
        -:   26:
        -:   27:    //Set up the game
        1:   28:    initializeGame(numberOfPlayers, cardArray, randSeed, &Game);
        -:   29:    
        -:   30:    #if (NOISY_TEST == 1)
        1:   31:    printf("----------------- Testing Council Room ----------------\n");
        1:   32:    printf("----------------- Test 1: Return Values ----------------\n");
        -:   33:    #endif
     1001:   34:    for (i = 0; i < x; i++) {
     1000:   35:        memcpy(&copyOfGame, &Game, sizeof(struct gameState));
     1000:   36:        returnValue = cardEffect(council_room, choice1, choice2, choice3, &copyOfGame, handIndex, &bonus);
     1000:   37:        if (returnValue != 0) {
    #####:   38:            isTestPassed = 0;
    #####:   39:            break;
        -:   40:        };
        -:   41:    };
        1:   42:    printf("Actual: %d, Expected: %d \n\n", returnValue, 0);
        1:   43:    if(isTestPassed){
        1:   44:        printf("%s TEST PASSED %s\n", bee, bee);
        -:   45:    }
        -:   46:    
        -:   47:    #if (NOISY_TEST == 1)
        1:   48:    printf("----------------- Test 2: Draw Cards ----------------\n");
        -:   49:    #endif
        -:   50:
        -:   51:
        1:   52:    int addedCards = 4;
        1:   53:    int discard = 1;
        1:   54:    int currentPlayer = whoseTurn(&Game);
        -:   55:
        1:   56:    for (i = 0; i < x; i++) {
        1:   57:        memcpy(&copyOfGame, &Game, sizeof(struct gameState));
        1:   58:        cardEffect(council_room, choice1, choice2, choice3, &copyOfGame, handIndex, &bonus);
        -:   59:
        1:   60:        if (copyOfGame.handCount[currentPlayer] != Game.handCount[currentPlayer] + addedCards - discard) {
        1:   61:            isTestPassed = 0;
        1:   62:            printf("%sFAILURE, Test 2%s\n", angery, angery);
        1:   63:            break;
        -:   64:        };
        -:   65:    };
        1:   66:    printf("Actual: %d, Expected: %d \n\n", copyOfGame.handCount[currentPlayer], Game.handCount[currentPlayer]+addedCards-discard);
        1:   67:    if(isTestPassed){
    #####:   68:        printf("%s TEST PASSED %s\n", bee, bee);
        -:   69:    }
        -:   70:    
        -:   71:    #if (NOISY_TEST == 1)
        1:   72:    printf("----------------- Test 3: Number of Buys ----------------\n");
        -:   73:    #endif
        1:   74:    int addedBuys = 1;
        1:   75:    currentPlayer = whoseTurn(&Game);
        -:   76:
     1001:   77:    for (i = 0; i < x; i++) {
     1000:   78:        memcpy(&copyOfGame, &Game, sizeof(struct gameState));
     1000:   79:        cardEffect(council_room, choice1, choice2, choice3, &copyOfGame, handIndex, &bonus);
     1000:   80:        if (copyOfGame.numBuys != Game.numBuys + addedBuys) {
    #####:   81:            isTestPassed = 0;
    #####:   82:            printf("%sFAILURE, Test 2%s\n", angery, angery);
    #####:   83:            break;
        -:   84:        };
        -:   85:    };
        -:   86:
        1:   87:    printf("Actual: %d, Expected: %d \n\n", copyOfGame.numBuys, Game.numBuys+addedBuys);
        1:   88:    if(isTestPassed){
    #####:   89:        printf("%s TEST PASSED %s\n", bee, bee);
        -:   90:    }
        -:   91:
        -:   92:    #if (NOISY_TEST == 1)
        1:   93:    printf("----------------- Test 4: Draw card for other player ----------------\n");
        -:   94:    #endif
        -:   95:
        -:   96:    int playerHand[4];
        -:   97:    int copyPlayerHand[4];
        1:   98:    addedCards = 1;
        1:   99:    currentPlayer = whoseTurn(&Game);
        -:  100:
     1001:  101:    for (i = 0; i < x; i++) {
     1000:  102:        memcpy(&copyOfGame, &Game, sizeof(struct gameState));
     1000:  103:        cardEffect(council_room, choice1, choice2, choice3, &copyOfGame, handIndex, &bonus);
        -:  104:
     3000:  105:        for (j = 0; j < Game.numPlayers; j++) {
     2000:  106:            if (j != currentPlayer) {
     1000:  107:                copyPlayerHand[j] = copyOfGame.handCount[j];
     1000:  108:                playerHand[j] = Game.handCount[j];
        -:  109:            }
        -:  110:        }
        -:  111:
     2000:  112:        for (j = 0; j < Game.numPlayers; j++) {
     2000:  113:            if (j != currentPlayer) {
     1000:  114:                if (copyPlayerHand[j] != playerHand[j] + addedCards) {
     1000:  115:                    isTestPassed = 0;
     1000:  116:                    printf("%sFAILURE, Test 2%s\n", angery, angery);
     1000:  117:                    break;
        -:  118:                }
        -:  119:            }
        -:  120:        }
        -:  121:    };
        -:  122:    
        1:  123:    if(isTestPassed){
    #####:  124:        printf("%s TEST PASSED %s\n", bee, bee);
        -:  125:    }
        1:  126:    return 0;
        -:  127:};
