        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/**********************************************
        -:    2: * Assignment 4
        -:    3: * Sara Hovey
        -:    4: * CS 362 
        -:    5: * Winter 2019
        -:    6: * gcc -o randomtestcard1 randomtestcard1.c -g dominion.o rngs.o -Wall -fpic -coverage -lm -std=c99
        -:    7:***********************************************/
        -:    8:
        -:    9:#include "dominion.h"
        -:   10:#include "dominion_helpers.h"
        -:   11:#include <string.h>
        -:   12:#include <stdio.h>
        -:   13:#include <assert.h>
        -:   14:#include "rngs.h"
        -:   15:#include <stdlib.h>
        -:   16:#include <math.h>
        -:   17:#include <time.h>
        -:   18:
function main called 1 returned 100% blocks executed 88%
        1:   19:int main() {
        -:   20:
        1:   21:    int isPassed = 1;
        1:   22:    int numberOfTests = 50;
        1:   23:    int handPosition = 0;
        1:   24:    int firstChoice = 0, secondChoice = 0, thirdChoice = 0;
        1:   25:    int bonus = 0;
        -:   26:    int currentPlayer;
        1:   27:    int addedCards = 4;
        1:   28:    int discard = 1;
        1:   29:    int addedBuys = 1;
        1:   30:    int otherPlrAdded = 1;
        -:   31:    int playerHand[4];
        -:   32:    int copyPlayerHand[4];
        -:   33:    
        1:   34:    char bee[] = "\U0001F41D";
        1:   35:    char angery[] = "\U0001F608";
        -:   36:    
        -:   37:    struct gameState Game, copyOfGame;
        -:   38:    int i, handPos, returnValue;
        -:   39:	int totalCards, copytotalCards;
        -:   40:
        -:   41:    // Seed random with time
        1:   42:    srand(time(NULL));
call    0 returned 1
call    1 returned 1
        -:   43:
        -:   44:
        1:   45:    printf("\n**********************Testing Ã‡ouncil Room******************\n");
call    0 returned 1
        -:   46:
        -:   47:    // Populate the struct holding the game state with random numbers 
       51:   48:    for (i = 0; i < numberOfTests; i++){
branch  0 taken 50
branch  1 taken 1 (fallthrough)
   328800:   49:        for (handPos = 0; handPos < sizeof(struct gameState)/ sizeof(int); handPos++) {
branch  0 taken 328750
branch  1 taken 50 (fallthrough)
   328750:   50:            ((int*)&Game)[handPos] = rand() % 128;
call    0 returned 328750
        -:   51:        }
        -:   52:
        -:   53:        // Here we make sure that the parts of the game state that we will be accessing
        -:   54:        // are populated with valid input
       50:   55:        Game.numPlayers = (rand() % 3)+2;
call    0 returned 50
       50:   56:        Game.whoseTurn = rand() % Game.numPlayers;
call    0 returned 50
       50:   57:        currentPlayer = whoseTurn(&Game);
call    0 returned 50
        -:   58:        
       50:   59:        Game.handCount[currentPlayer] = (rand() % (MAX_HAND/2))+1;
call    0 returned 50
       50:   60:        Game.deckCount[currentPlayer] = (rand() % (MAX_DECK/2))+1;
call    0 returned 50
       50:   61:        Game.discardCount[currentPlayer] = (rand() % (MAX_DECK/2))+1;
call    0 returned 50
        -:   62:        
       50:   63:        Game.numBuys = 0;
       50:   64:        handPosition = (rand() % Game.handCount[currentPlayer]);
call    0 returned 50
        -:   65:
        -:   66:
        -:   67:        // Make a copy of the game state struct such that we can
        -:   68:        // compare the original state to changes made via tested functions
       50:   69:        memcpy(&copyOfGame, &Game, sizeof(struct gameState));
        -:   70:
        -:   71:        //Since my function is int and not void, we can test return value here
       50:   72:        returnValue = cardEffect(council_room, firstChoice, secondChoice, thirdChoice, &copyOfGame, handPosition, &bonus);
call    0 returned 50
        -:   73:        
        -:   74:        //Expecting a 0 to indicate nothing went wrong
       50:   75:        if (returnValue != 0) {
branch  0 taken 0 (fallthrough)
branch  1 taken 50
    #####:   76:            isPassed = 0;
    #####:   77:            printf("%s TEST FAILED on return value %s\n", angery, angery);
call    0 never executed
        -:   78:        }
        -:   79:        else{
       50:   80:            printf("%s TEST PASSED on return value %s\n", bee, bee);
call    0 returned 50
        -:   81:        }
        -:   82:
        -:   83:        // Test number of cards in the hand
       50:   84:        if (copyOfGame.handCount[currentPlayer] != Game.handCount[currentPlayer]+addedCards-discard){
branch  0 taken 50 (fallthrough)
branch  1 taken 0
       50:   85:            isPassed = 0;
       50:   86:            printf("%s TEST FAILED on count of cards in hand %s\n", angery, angery);
call    0 returned 50
        -:   87:        }
        -:   88:        else{
    #####:   89:            printf("%s TEST PASSED on count of cards in hand %s\n", bee, bee);
call    0 never executed
        -:   90:        }
       50:   91:        printf("Actual hand count: %d, Expected hand count: %d \n\n", copyOfGame.handCount[currentPlayer], Game.handCount[currentPlayer]+addedCards-discard);
call    0 returned 50
        -:   92:
        -:   93:		// Test number of cards in deck and discard pile
       50:   94:        totalCards = Game.deckCount[currentPlayer] + Game.discardCount[currentPlayer];
       50:   95:		copytotalCards = copyOfGame.deckCount[currentPlayer] + copyOfGame.discardCount[currentPlayer];
       50:   96:		if (copytotalCards != totalCards - addedCards) {
branch  0 taken 0 (fallthrough)
branch  1 taken 50
    #####:   97:			isPassed = 0;
    #####:   98:            printf("%s TEST FAILED on total card count %s\n", angery, angery);
call    0 never executed
        -:   99:		}
        -:  100:		else{
       50:  101:            printf("%s TEST PASSED on total card count %s\n", bee, bee);
call    0 returned 50
        -:  102:        }
       50:  103:		printf("Actual total cards: %d, Expected total cards: %d \n\n", copytotalCards, totalCards-addedCards);
call    0 returned 50
        -:  104:
        -:  105:        // Test number of buy actions the player has 
       50:  106:        if (copyOfGame.numBuys != Game.numBuys + addedBuys) {
branch  0 taken 0 (fallthrough)
branch  1 taken 50
    #####:  107:            isPassed = 0;
    #####:  108:            printf("%s TEST FAILED on count of cards in hand %s\n", angery, angery);
call    0 never executed
        -:  109:        }
        -:  110:        else{
       50:  111:            printf("%s TEST PASSED on buy count %s\n", bee, bee);
call    0 returned 50
        -:  112:        }
       50:  113:        printf("Actual buys: %d, Expected buys: %d \n\n", copyOfGame.numBuys, Game.numBuys+addedBuys);
call    0 returned 50
        -:  114:        
      201:  115:        for (handPos = 0; handPos < Game.numPlayers; handPos++) {
branch  0 taken 151
branch  1 taken 50 (fallthrough)
      151:  116:            if (handPos != currentPlayer) {
branch  0 taken 101 (fallthrough)
branch  1 taken 50
      101:  117:                copyPlayerHand[handPos] = copyOfGame.handCount[handPos];
      101:  118:                playerHand[handPos] = Game.handCount[handPos];
        -:  119:            }
        -:  120:        }
        -:  121:
        -:  122:        //test the other players hand count
      201:  123:        for (handPos = 0; handPos < Game.numPlayers; handPos++) {
branch  0 taken 151
branch  1 taken 50 (fallthrough)
      151:  124:            if (handPos != currentPlayer) {
branch  0 taken 101 (fallthrough)
branch  1 taken 50
      101:  125:                if (copyPlayerHand[handPos] != playerHand[handPos] + otherPlrAdded) {
branch  0 taken 101 (fallthrough)
branch  1 taken 0
      101:  126:                    isPassed = 0;
      101:  127:                    printf("%s TEST FAILED on count of other player's hand %s\n", angery, angery);
call    0 returned 101
        -:  128:                }
        -:  129:                else{
    #####:  130:                    printf("%s TEST PASSED on count of other player's hand %s\n", bee, bee);
call    0 never executed
        -:  131:                }
      101:  132:			    printf("Actual count of other hand:: %d, Expected count of other hand: %d \n\n", copyPlayerHand[handPos],  playerHand[handPos] + otherPlrAdded);
call    0 returned 101
        -:  133:            }
        -:  134:        }
        -:  135:    
        -:  136:    }
        -:  137:
        -:  138:
        -:  139:    //If the tests have not already failed, return true!
        1:  140:    if(isPassed){
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  141:        printf("%s ALL TESTS PASSED %s\n", bee, bee);
call    0 never executed
        -:  142:    }
        -:  143:
        1:  144:    return 0;
        -:  145:};
