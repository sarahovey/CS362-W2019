        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     5255:    8:int compare(const void* a, const void* b) {
     5255:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
     5255:   11:  if (*(int*)a < *(int*)b)
       64:   12:    return -1;
     5191:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
        8:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      880:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        8:   87:  if (numPlayers == 2)
        -:   88:    {
        8:   89:      state->supplyCount[estate] = 8;
        8:   90:      state->supplyCount[duchy] = 8;
        8:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        8:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:  state->supplyCount[silver] = 40;
        8:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1320:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1240:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       80:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       16:  115:		  if (numPlayers == 2){ 
        8:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       72:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       80:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       24:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       16:  140:      state->deckCount[i] = 0;
       64:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       48:  143:	  state->deck[i][j] = estate;
       48:  144:	  state->deckCount[i]++;
        -:  145:	}
      128:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      112:  148:	  state->deck[i][j] = copper;
      112:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       24:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       16:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       24:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       16:  166:      state->handCount[i] = 0;
       16:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      224:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      216:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        8:  182:  state->outpostPlayed = 0;
        8:  183:  state->phase = 0;
        8:  184:  state->numActions = 1;
        8:  185:  state->numBuys = 1;
        8:  186:  state->playedCardCount = 0;
        8:  187:  state->whoseTurn = 0;
        8:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       48:  192:  for (it = 0; it < 5; it++){
       40:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        8:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        8:  198:  return 0;
        -:  199:}
        -:  200:
     5031:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     5031:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     5031:  209:  if (state->deckCount[player] < 1)
     4012:  210:    return -1;
     1019:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     7213:  214:  while (state->deckCount[player] > 0) {
     5175:  215:    card = floor(Random() * state->deckCount[player]);
     5175:  216:    newDeck[newDeckPos] = state->deck[player][card];
     5175:  217:    newDeckPos++;
    10602:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     5427:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     5175:  221:    state->deckCount[player]--;
        -:  222:  }
     6194:  223:  for (i = 0; i < newDeckPos; i++) {
     5175:  224:    state->deck[player][i] = newDeck[i];
     5175:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1019:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
       16:  311:int numHandCards(struct gameState *state) {
       16:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
     2032:  315:int handCard(int handPos, struct gameState *state) {
     2032:  316:  int currentPlayer = whoseTurn(state);
     2032:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
     8108:  320:int supplyCount(int card, struct gameState *state) {
     8108:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
     4000:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
     4000:  326:  int count = 0;
        -:  327:
    24000:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    20000:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    24000:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    20000:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
     4000:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
     4000:  343:  return count;
        -:  344:}
        -:  345:
     8209:  346:int whoseTurn(struct gameState *state) {
     8209:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    30334:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    30334:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     8024:  533:    for (i = 0; i < state->discardCount[player];i++){
     5015:  534:      state->deck[player][i] = state->discard[player][i];
     5015:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     3009:  538:    state->deckCount[player] = state->discardCount[player];
     3009:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     3009:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     3009:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     3009:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     3009:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     3009:  559:    if (deckCounter == 0)
     2006:  560:      return -1;
        -:  561:
     1003:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     1003:  563:    state->deckCount[player]--;
     1003:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    27325:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    27325:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    27325:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    27325:  576:    state->deckCount[player]--;
    27325:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    28328:  580:  return 0;
        -:  581:}
        -:  582:
        -:  583:/*
        -:  584:Card functions live here
        -:  585:*/
        -:  586:
        -:  587://Smithy, with bug introduced 
     1001:  588:int smithyEffect(int currentPlayer, struct gameState *state, int handPos){
        -:  589:  //+3 Cards
     3003:  590:  for (int i = 1; i < 3; i++){
     2002:  591:    drawCard(currentPlayer, state);
        -:  592:  }
        -:  593:			
        -:  594:  //discard card from hand
     1001:  595:  discardCard(handPos, currentPlayer, state, 0);
     1001:  596:  return 0;
        -:  597:}
        -:  598:
        -:  599://Adventurer
     1003:  600:int adventurerEffect(struct gameState *state, int currentPlayer, int drawntreasure, int cardDrawn, int z, int temphand[MAX_HAND]){
        -:  601:    //int temphand[MAX_HAND];// moved above the if statement
     9027:  602:    while(drawntreasure<2){
     7021:  603:    	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
     2006:  604:    	  shuffle(currentPlayer, state);
        -:  605:    	}
     7021:  606:    	drawCard(currentPlayer, state);
        -:  607:    	//bug introduced: removed the '-1', this makes it such that the card on the top card in the hand is not the most recently drawn card 
     7021:  608:    	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
     7021:  609:    	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     2006:  610:    	  drawntreasure++;
        -:  611:    	else{
     5015:  612:    	  temphand[z]=cardDrawn;
     5015:  613:    	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     5015:  614:    	  z++;
        -:  615:    	}
        -:  616:    }
     7021:  617:    while(z-1>=0){
     5015:  618:    	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     5015:  619:    	z=z-1;
        -:  620:      }
     1003:  621:    return 0;
        -:  622:}
        -:  623:
      100:  624:int cutpurseEffect(int currentPlayer, struct gameState *state, int handPos ){
      100:  625:    updateCoins(currentPlayer, state, 2);
        -:  626:    int i, j, k;
      300:  627:    for (i = 0; i < state->numPlayers; i++){
      200:  628:        if (i != currentPlayer){
      190:  629:          for (j = 0; j < state->handCount[i]; j++){
    #####:  630:              if (state->hand[i][j] == copper){
        -:  631:                //bug: switch the order of the i and j variable passing
    #####:  632:                  discardCard(i, j, state, 0);
    #####:  633:                  break;
        -:  634:                }
    #####:  635:                if (j == state->handCount[i]){
    #####:  636:                  for (k = 0; k < state->handCount[i]; k++){
        -:  637:            	    if (DEBUG)
        -:  638:            	        printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  639:        	        }	
    #####:  640:                  break;
        -:  641:                }		
        -:  642:            }
        -:  643:        			
        -:  644:        }
        -:  645:    		
        -:  646:    }   				
        -:  647:    
        -:  648:    //discard played card from hand
      100:  649:    discardCard(handPos, currentPlayer, state, 0);			
      100:  650:    return 0;
        -:  651:}
        -:  652:
     4054:  653:int councilRoomEffect(struct gameState *state, int currentPlayer, int handPos){
        -:  654:  //+4 Cards
        -:  655:  int i;
    20270:  656:  for (i = 0; i < 4; i++){
    16216:  657:	  drawCard(currentPlayer, state);
        -:  658:	}
        -:  659:			
        -:  660:    //+1 Buy
     4054:  661:    state->numBuys++;
        -:  662:			
        -:  663:    //Each other player draws a card
    12162:  664:    for (i = 0; i < state->numPlayers; i++){
        -:  665:        //bug: switch eval from != to ==
     8108:  666:        if ( i == currentPlayer ){
     4054:  667:	      drawCard(i, state);
        -:  668:	    }
        -:  669:	}
        -:  670:			
        -:  671:    //put played card in played card pile
     4054:  672:    discardCard(handPos, currentPlayer, state, 0);
        -:  673:    	
     4054:  674:    return 0;
        -:  675:}
        -:  676:
    #####:  677:int gardensEffect(){
    #####:  678:    return -1;
        -:  679:}
        -:  680:
        -:  681:
     4054:  682:int getCost(int cardNumber)
        -:  683:{
     4054:  684:  switch( cardNumber ) 
        -:  685:    {
        -:  686:    case curse:
     4054:  687:      return 0;
        -:  688:    case estate:
    #####:  689:      return 2;
        -:  690:    case duchy:
    #####:  691:      return 5;
        -:  692:    case province:
    #####:  693:      return 8;
        -:  694:    case copper:
    #####:  695:      return 0;
        -:  696:    case silver:
    #####:  697:      return 3;
        -:  698:    case gold:
    #####:  699:      return 6;
        -:  700:    case adventurer:
    #####:  701:      return 6;
        -:  702:    case council_room:
    #####:  703:      return 5;
        -:  704:    case feast:
    #####:  705:      return 4;
        -:  706:    case gardens:
    #####:  707:      return 4;
        -:  708:    case mine:
    #####:  709:      return 5;
        -:  710:    case remodel:
    #####:  711:      return 4;
        -:  712:    case smithy:
    #####:  713:      return 4;
        -:  714:    case village:
    #####:  715:      return 3;
        -:  716:    case baron:
    #####:  717:      return 4;
        -:  718:    case great_hall:
    #####:  719:      return 3;
        -:  720:    case minion:
    #####:  721:      return 5;
        -:  722:    case steward:
    #####:  723:      return 3;
        -:  724:    case tribute:
    #####:  725:      return 5;
        -:  726:    case ambassador:
    #####:  727:      return 3;
        -:  728:    case cutpurse:
    #####:  729:      return 4;
        -:  730:    case embargo: 
    #####:  731:      return 2;
        -:  732:    case outpost:
    #####:  733:      return 5;
        -:  734:    case salvager:
    #####:  735:      return 4;
        -:  736:    case sea_hag:
    #####:  737:      return 4;
        -:  738:    case treasure_map:
    #####:  739:      return 4;
        -:  740:    }
        -:  741:	
    #####:  742:  return -1;
        -:  743:}
        -:  744:
     5155:  745:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  746:{
        -:  747:  int i;
        -:  748:  int j;
        -:  749:  //int k;
        -:  750:  int x;
        -:  751:  int index;
     5155:  752:  int currentPlayer = whoseTurn(state);
     5155:  753:  int nextPlayer = currentPlayer + 1;
        -:  754:
     5155:  755:  int tributeRevealedCards[2] = {-1, -1};
        -:  756:  int temphand[MAX_HAND];// moved above the if statement
     5155:  757:  int drawntreasure=0;
     5155:  758:  int cardDrawn = 0; // intialized to 0
     5155:  759:  int z = 0;// this is the counter for the temp hand
     5155:  760:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  761:    nextPlayer = 0;
        -:  762:  }
        -:  763:  
        -:  764:	
        -:  765:  //uses switch to select card and perform actions
     5155:  766:  switch( card ){
        -:  767:    case adventurer:
     1003:  768:        adventurerEffect(state, currentPlayer, drawntreasure, cardDrawn, z, temphand);
        -:  769:    case council_room:
     4054:  770:      councilRoomEffect(state, currentPlayer, handPos);
        -:  771:    case feast:
        -:  772:      //gain card with cost up to 5
        -:  773:      //Backup hand
    44594:  774:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    40540:  775:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    40540:  776:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  777:      }
        -:  778:      //Backup hand
        -:  779:      
        -:  780:      //Update Coins for Buy
     4054:  781:      updateCoins(currentPlayer, state, 5);
     4054:  782:      x = 1;//Condition to loop on
    12162:  783:      while( x == 1) { //Buy one card
     4054:  784:        if (supplyCount(choice1, state) <= 0){
        -:  785:          if (DEBUG){
        -:  786:            printf("None of that card left, sorry!\n");
        -:  787:          }
        -:  788:          
        -:  789:          if (DEBUG){
        -:  790:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  791:          }
        -:  792:        }
     4054:  793:        else if (state->coins < getCost(choice1)){
    #####:  794:          printf("That card is too expensive!\n");
        -:  795:          
        -:  796:          if (DEBUG){
        -:  797:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  798:          }
        -:  799:        }
        -:  800:        else{
        -:  801:        
        -:  802:          if (DEBUG){
        -:  803:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  804:          }
        -:  805:          
     4054:  806:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
     4054:  807:          x = 0;//No more buying cards
        -:  808:          
        -:  809:          if (DEBUG){
        -:  810:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  811:          }
        -:  812:        
        -:  813:        }
        -:  814:      }     
        -:  815:      
        -:  816:      //Reset Hand
    44594:  817:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    40540:  818:      state->hand[currentPlayer][i] = temphand[i];
    40540:  819:      temphand[i] = -1;
        -:  820:      }
        -:  821:      //Reset Hand
        -:  822:      		
     4054:  823:      return 0;
        -:  824:			
        -:  825:    case gardens:
    #####:  826:      gardensEffect();
        -:  827:			
        -:  828:    case mine:
    #####:  829:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  830:
    #####:  831:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  832:	{
    #####:  833:	  return -1;
        -:  834:	}
        -:  835:		
    #####:  836:      if (choice2 > treasure_map || choice2 < curse)
        -:  837:	{
    #####:  838:	  return -1;
        -:  839:	}
        -:  840:
    #####:  841:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  842:	{
    #####:  843:	  return -1;
        -:  844:	}
        -:  845:
    #####:  846:      gainCard(choice2, state, 2, currentPlayer);
        -:  847:
        -:  848:      //discard card from hand
    #####:  849:      discardCard(handPos, currentPlayer, state, 0);
        -:  850:
        -:  851:      //discard trashed card
    #####:  852:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  853:	{
    #####:  854:	  if (state->hand[currentPlayer][i] == j)
        -:  855:	    {
    #####:  856:	      discardCard(i, currentPlayer, state, 0);			
    #####:  857:	      break;
        -:  858:	    }
        -:  859:	}
        -:  860:			
    #####:  861:      return 0;
        -:  862:			
        -:  863:    case remodel:
    #####:  864:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  865:
    #####:  866:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:
    #####:  871:      gainCard(choice2, state, 0, currentPlayer);
        -:  872:
        -:  873:      //discard card from hand
    #####:  874:      discardCard(handPos, currentPlayer, state, 0);
        -:  875:
        -:  876:      //discard trashed card
    #####:  877:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  878:	{
    #####:  879:	  if (state->hand[currentPlayer][i] == j)
        -:  880:	    {
    #####:  881:	      discardCard(i, currentPlayer, state, 0);			
    #####:  882:	      break;
        -:  883:	    }
        -:  884:	}
        -:  885:
        -:  886:
    #####:  887:      return 0;
        -:  888:		
        -:  889:    case smithy:
     1001:  890:      smithyEffect(currentPlayer, state, handPos );
        -:  891:		
        -:  892:    case village:
        -:  893:      //+1 Card
     1001:  894:      drawCard(currentPlayer, state);
        -:  895:			
        -:  896:      //+2 Actions
     1001:  897:      state->numActions = state->numActions + 2;
        -:  898:			
        -:  899:      //discard played card from hand
     1001:  900:      discardCard(handPos, currentPlayer, state, 0);
     1001:  901:      return 0;
        -:  902:		
        -:  903:    case baron:
    #####:  904:      state->numBuys++;//Increase buys by 1!
    #####:  905:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  906:	int p = 0;//Iterator for hand!
    #####:  907:	int card_not_discarded = 1;//Flag for discard set!
    #####:  908:	while(card_not_discarded){
    #####:  909:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  910:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  911:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  912:	    state->discardCount[currentPlayer]++;
    #####:  913:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  914:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  915:	    }
    #####:  916:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  917:	    state->handCount[currentPlayer]--;
    #####:  918:	    card_not_discarded = 0;//Exit the loop
        -:  919:	  }
    #####:  920:	  else if (p > state->handCount[currentPlayer]){
        -:  921:	    if(DEBUG) {
        -:  922:	      printf("No estate cards in your hand, invalid choice\n");
        -:  923:	      printf("Must gain an estate if there are any\n");
        -:  924:	    }
    #####:  925:	    if (supplyCount(estate, state) > 0){
    #####:  926:	      gainCard(estate, state, 0, currentPlayer);
    #####:  927:	      state->supplyCount[estate]--;//Decrement estates
    #####:  928:	      if (supplyCount(estate, state) == 0){
    #####:  929:		isGameOver(state);
        -:  930:	      }
        -:  931:	    }
    #####:  932:	    card_not_discarded = 0;//Exit the loop
        -:  933:	  }
        -:  934:			    
        -:  935:	  else{
    #####:  936:	    p++;//Next card
        -:  937:	  }
        -:  938:	}
        -:  939:      }
        -:  940:			    
        -:  941:      else{
    #####:  942:	if (supplyCount(estate, state) > 0){
    #####:  943:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  944:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  945:	  if (supplyCount(estate, state) == 0){
    #####:  946:	    isGameOver(state);
        -:  947:	  }
        -:  948:	}
        -:  949:      }
        -:  950:	    
        -:  951:      
    #####:  952:      return 0;
        -:  953:		
        -:  954:    case great_hall:
        -:  955:      //+1 Card
    #####:  956:      drawCard(currentPlayer, state);
        -:  957:			
        -:  958:      //+1 Actions
    #####:  959:      state->numActions++;
        -:  960:			
        -:  961:      //discard card from hand
    #####:  962:      discardCard(handPos, currentPlayer, state, 0);
    #####:  963:      return 0;
        -:  964:		
        -:  965:    case minion:
        -:  966:      //+1 action
    #####:  967:      state->numActions++;
        -:  968:			
        -:  969:      //discard card from hand
    #####:  970:      discardCard(handPos, currentPlayer, state, 0);
        -:  971:			
    #####:  972:      if (choice1)		//+2 coins
        -:  973:	{
    #####:  974:	  state->coins = state->coins + 2;
        -:  975:	}
        -:  976:			
    #####:  977:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  978:	{
        -:  979:	  //discard hand
    #####:  980:	  while(numHandCards(state) > 0)
        -:  981:	    {
    #####:  982:	      discardCard(handPos, currentPlayer, state, 0);
        -:  983:	    }
        -:  984:				
        -:  985:	  //draw 4
    #####:  986:	  for (i = 0; i < 4; i++)
        -:  987:	    {
    #####:  988:	      drawCard(currentPlayer, state);
        -:  989:	    }
        -:  990:				
        -:  991:	  //other players discard hand and redraw if hand size > 4
    #####:  992:	  for (i = 0; i < state->numPlayers; i++)
        -:  993:	    {
    #####:  994:	      if (i != currentPlayer)
        -:  995:		{
    #####:  996:		  if ( state->handCount[i] > 4 )
        -:  997:		    {
        -:  998:		      //discard hand
    #####:  999:		      while( state->handCount[i] > 0 )
        -: 1000:			{
    #####: 1001:			  discardCard(handPos, i, state, 0);
        -: 1002:			}
        -: 1003:							
        -: 1004:		      //draw 4
    #####: 1005:		      for (j = 0; j < 4; j++)
        -: 1006:			{
    #####: 1007:			  drawCard(i, state);
        -: 1008:			}
        -: 1009:		    }
        -: 1010:		}
        -: 1011:	    }
        -: 1012:				
        -: 1013:	}
    #####: 1014:      return 0;
        -: 1015:		
        -: 1016:    case steward:
    #####: 1017:      if (choice1 == 1)
        -: 1018:	{
        -: 1019:	  //+2 cards
    #####: 1020:	  drawCard(currentPlayer, state);
    #####: 1021:	  drawCard(currentPlayer, state);
        -: 1022:	}
    #####: 1023:      else if (choice1 == 2)
        -: 1024:	{
        -: 1025:	  //+2 coins
    #####: 1026:	  state->coins = state->coins + 2;
        -: 1027:	}
        -: 1028:      else
        -: 1029:	{
        -: 1030:	  //trash 2 cards in hand
    #####: 1031:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1032:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1033:	}
        -: 1034:			
        -: 1035:      //discard card from hand
    #####: 1036:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1037:      return 0;
        -: 1038:		
        -: 1039:    case tribute:
    #####: 1040:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1041:	if (state->deckCount[nextPlayer] > 0){
    #####: 1042:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1043:	  state->deckCount[nextPlayer]--;
        -: 1044:	}
    #####: 1045:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1046:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1047:	  state->discardCount[nextPlayer]--;
        -: 1048:	}
        -: 1049:	else{
        -: 1050:	  //No Card to Reveal
        -: 1051:	  if (DEBUG){
        -: 1052:	    printf("No cards to reveal\n");
        -: 1053:	  }
        -: 1054:	}
        -: 1055:      }
        -: 1056:	    
        -: 1057:      else{
    #####: 1058:	if (state->deckCount[nextPlayer] == 0){
    #####: 1059:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1060:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1061:	    state->deckCount[nextPlayer]++;
    #####: 1062:	    state->discard[nextPlayer][i] = -1;
    #####: 1063:	    state->discardCount[nextPlayer]--;
        -: 1064:	  }
        -: 1065:			    
    #####: 1066:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1067:	} 
    #####: 1068:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1069:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1070:	state->deckCount[nextPlayer]--;
    #####: 1071:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1072:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1073:	state->deckCount[nextPlayer]--;
        -: 1074:      }    
        -: 1075:		       
    #####: 1076:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1077:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1078:	state->playedCardCount++;
    #####: 1079:	tributeRevealedCards[1] = -1;
        -: 1080:      }
        -: 1081:
    #####: 1082:      for (i = 0; i <= 2; i ++){
    #####: 1083:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1084:	  state->coins += 2;
        -: 1085:	}
        -: 1086:		    
    #####: 1087:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1088:	  drawCard(currentPlayer, state);
    #####: 1089:	  drawCard(currentPlayer, state);
        -: 1090:	}
        -: 1091:	else{//Action Card
    #####: 1092:	  state->numActions = state->numActions + 2;
        -: 1093:	}
        -: 1094:      }
        -: 1095:	    
    #####: 1096:      return 0;
        -: 1097:		
        -: 1098:    case ambassador:
    #####: 1099:      j = 0;		//used to check if player has enough cards to discard
        -: 1100:
    #####: 1101:      if (choice2 > 2 || choice2 < 0)
        -: 1102:	{
    #####: 1103:	  return -1;				
        -: 1104:	}
        -: 1105:
    #####: 1106:      if (choice1 == handPos)
        -: 1107:	{
    #####: 1108:	  return -1;
        -: 1109:	}
        -: 1110:
    #####: 1111:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1112:	{
    #####: 1113:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1114:	    {
    #####: 1115:	      j++;
        -: 1116:	    }
        -: 1117:	}
    #####: 1118:      if (j < choice2)
        -: 1119:	{
    #####: 1120:	  return -1;				
        -: 1121:	}
        -: 1122:
        -: 1123:      if (DEBUG) 
        -: 1124:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1125:
        -: 1126:      //increase supply count for choosen card by amount being discarded
    #####: 1127:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1128:			
        -: 1129:      //each other player gains a copy of revealed card
    #####: 1130:      for (i = 0; i < state->numPlayers; i++)
        -: 1131:	{
    #####: 1132:	  if (i != currentPlayer)
        -: 1133:	    {
    #####: 1134:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1135:	    }
        -: 1136:	}
        -: 1137:
        -: 1138:      //discard played card from hand
    #####: 1139:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1140:
        -: 1141:      //trash copies of cards returned to supply
    #####: 1142:      for (j = 0; j < choice2; j++)
        -: 1143:	{
    #####: 1144:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1145:	    {
    #####: 1146:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1147:		{
    #####: 1148:		  discardCard(i, currentPlayer, state, 1);
    #####: 1149:		  break;
        -: 1150:		}
        -: 1151:	    }
        -: 1152:	}			
        -: 1153:
    #####: 1154:      return 0;
        -: 1155:		
        -: 1156:    case cutpurse:
      100: 1157:      cutpurseEffect(currentPlayer, state, handPos);
        -: 1158:
        -: 1159:		
        -: 1160:    case embargo: 
        -: 1161:      //+2 Coins
      100: 1162:      state->coins = state->coins + 2;
        -: 1163:			
        -: 1164:      //see if selected pile is in play
      100: 1165:      if ( state->supplyCount[choice1] == -1 )
        -: 1166:	{
    #####: 1167:	  return -1;
        -: 1168:	}
        -: 1169:			
        -: 1170:      //add embargo token to selected supply pile
      100: 1171:      state->embargoTokens[choice1]++;
        -: 1172:			
        -: 1173:      //trash card
      100: 1174:      discardCard(handPos, currentPlayer, state, 1);		
      100: 1175:      return 0;
        -: 1176:		
        -: 1177:    case outpost:
        -: 1178:      //set outpost flag
    #####: 1179:      state->outpostPlayed++;
        -: 1180:			
        -: 1181:      //discard card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case salvager:
        -: 1186:      //+1 buy
    #####: 1187:      state->numBuys++;
        -: 1188:			
    #####: 1189:      if (choice1)
        -: 1190:	{
        -: 1191:	  //gain coins equal to trashed card
    #####: 1192:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1193:	  //trash card
    #####: 1194:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1195:	}
        -: 1196:			
        -: 1197:      //discard card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1199:      return 0;
        -: 1200:		
        -: 1201:    case sea_hag:
    #####: 1202:      for (i = 0; i < state->numPlayers; i++){
    #####: 1203:	if (i != currentPlayer){
    #####: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1205:	  state->discardCount[i]++;
    #####: 1206:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1207:	}
        -: 1208:      }
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case treasure_map:
        -: 1212:      //search hand for another treasure_map
    #####: 1213:      index = -1;
    #####: 1214:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1215:	{
    #####: 1216:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1217:	    {
    #####: 1218:	      index = i;
    #####: 1219:	      break;
        -: 1220:	    }
        -: 1221:	}
    #####: 1222:      if (index > -1)
        -: 1223:	{
        -: 1224:	  //trash both treasure cards
    #####: 1225:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1226:	  discardCard(index, currentPlayer, state, 1);
        -: 1227:
        -: 1228:	  //gain 4 Gold cards
    #####: 1229:	  for (i = 0; i < 4; i++)
        -: 1230:	    {
    #####: 1231:	      gainCard(gold, state, 1, currentPlayer);
        -: 1232:	    }
        -: 1233:				
        -: 1234:	  //return success
    #####: 1235:	  return 1;
        -: 1236:	}
        -: 1237:			
        -: 1238:      //no second treasure_map found in hand
    #####: 1239:      return -1;
        -: 1240:    }
        -: 1241:	
    #####: 1242:  return -1;
        -: 1243:}
        -: 1244:
     6256: 1245:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1246:{
        -: 1247:	
        -: 1248:  //if card is not trashed, added to Played pile 
     6256: 1249:  if (trashFlag < 1)
        -: 1250:    {
        -: 1251:      //add card to played pile
     6156: 1252:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     6156: 1253:      state->playedCardCount++;
        -: 1254:    }
        -: 1255:	
        -: 1256:  //set played card to -1
     6256: 1257:  state->hand[currentPlayer][handPos] = -1;
        -: 1258:	
        -: 1259:  //remove card from player's hand
     6256: 1260:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1261:    {
        -: 1262:      //reduce number of cards in hand
        2: 1263:      state->handCount[currentPlayer]--;
        -: 1264:    }
     6254: 1265:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1266:    {
        -: 1267:      //reduce number of cards in hand
    #####: 1268:      state->handCount[currentPlayer]--;
        -: 1269:    }
        -: 1270:  else 	
        -: 1271:    {
        -: 1272:      //replace discarded card with last card in hand
     6254: 1273:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1274:      //set last card to -1
     6254: 1275:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1276:      //reduce number of cards in hand
     6254: 1277:      state->handCount[currentPlayer]--;
        -: 1278:    }
        -: 1279:	
     6256: 1280:  return 0;
        -: 1281:}
        -: 1282:
     4054: 1283:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1284:{
        -: 1285:  //Note: supplyPos is enum of choosen card
        -: 1286:	
        -: 1287:  //check if supply pile is empty (0) or card is not used in game (-1)
     4054: 1288:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1289:    {
    #####: 1290:      return -1;
        -: 1291:    }
        -: 1292:	
        -: 1293:  //added card for [whoseTurn] current player:
        -: 1294:  // toFlag = 0 : add to discard
        -: 1295:  // toFlag = 1 : add to deck
        -: 1296:  // toFlag = 2 : add to hand
        -: 1297:
     4054: 1298:  if (toFlag == 1)
        -: 1299:    {
    #####: 1300:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1301:      state->deckCount[player]++;
        -: 1302:    }
     4054: 1303:  else if (toFlag == 2)
        -: 1304:    {
    #####: 1305:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1306:      state->handCount[player]++;
        -: 1307:    }
        -: 1308:  else
        -: 1309:    {
     4054: 1310:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     4054: 1311:      state->discardCount[player]++;
        -: 1312:    }
        -: 1313:	
        -: 1314:  //decrease number in supply pile
     4054: 1315:  state->supplyCount[supplyPos]--;
        -: 1316:	 
     4054: 1317:  return 0;
        -: 1318:}
        -: 1319:
    11162: 1320:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1321:{
        -: 1322:  int i;
        -: 1323:	
        -: 1324:  //reset coin count
    11162: 1325:  state->coins = 0;
        -: 1326:
        -: 1327:  //add coins for each Treasure card in player's hand
    77706: 1328:  for (i = 0; i < state->handCount[player]; i++)
        -: 1329:    {
    66544: 1330:      if (state->hand[player][i] == copper)
        -: 1331:	{
    10034: 1332:	  state->coins += 1;
        -: 1333:	}
    56510: 1334:      else if (state->hand[player][i] == silver)
        -: 1335:	{
     7008: 1336:	  state->coins += 2;
        -: 1337:	}
    49502: 1338:      else if (state->hand[player][i] == gold)
        -: 1339:	{
     7007: 1340:	  state->coins += 3;
        -: 1341:	}	
        -: 1342:    }	
        -: 1343:
        -: 1344:  //add bonus
    11162: 1345:  state->coins += bonus;
        -: 1346:
    11162: 1347:  return 0;
        -: 1348:}
        -: 1349:
        -: 1350:
        -: 1351://end of dominion.c
        -: 1352:
