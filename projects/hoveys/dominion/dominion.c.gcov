        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 91074 returned 100% blocks executed 100%
    91074:    8:int compare(const void* a, const void* b) {
    91074:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 24296 (fallthrough)
branch  1 taken 66778
    24296:   10:    return 1;
    66778:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 15829 (fallthrough)
branch  1 taken 50949
    15829:   12:    return -1;
    50949:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 0 returned 0% blocks executed 0%
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
call    0 never executed
    #####:   45:  PutSeed((long)randomSeed);
call    0 never executed
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
branch  0 never executed
branch  1 never executed
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 never executed
branch  1 never executed
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 never executed
branch  1 never executed
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
branch  0 never executed
branch  1 never executed
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
branch  0 never executed
branch  1 never executed
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 never executed
branch  1 never executed
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
branch  0 never executed
branch  1 never executed
    #####:  193:    drawCard(state->whoseTurn, state);
call    0 never executed
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 536 returned 100% blocks executed 100%
      536:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      536:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      536:  209:  if (state->deckCount[player] < 1)
branch  0 taken 432 (fallthrough)
branch  1 taken 104
      432:  210:    return -1;
      104:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 104
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    19015:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 18807
branch  1 taken 104 (fallthrough)
    18807:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 18807
    18807:  216:    newDeck[newDeckPos] = state->deck[player][card];
    18807:  217:    newDeckPos++;
  1155649:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 1136842
branch  1 taken 18807 (fallthrough)
  1136842:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    18807:  221:    state->deckCount[player]--;
        -:  222:  }
    18911:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 18807
branch  1 taken 104 (fallthrough)
    18807:  224:    state->deck[player][i] = newDeck[i];
    18807:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      104:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 12227 returned 100% blocks executed 100%
    12227:  311:int numHandCards(struct gameState *state) {
    12227:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 12227
        -:  313:}
        -:  314:
function handCard called 24255 returned 100% blocks executed 100%
    24255:  315:int handCard(int handPos, struct gameState *state) {
    24255:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 24255
    24255:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 200 returned 100% blocks executed 100%
      200:  320:int supplyCount(int card, struct gameState *state) {
      200:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 37282 returned 100% blocks executed 100%
    37282:  346:int whoseTurn(struct gameState *state) {
    37282:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 13892 returned 100% blocks executed 100%
    13892:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    13892:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 295 (fallthrough)
branch  1 taken 13597
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    19102:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 18807
branch  1 taken 295 (fallthrough)
    18807:  534:      state->deck[player][i] = state->discard[player][i];
    18807:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      295:  538:    state->deckCount[player] = state->discardCount[player];
      295:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      295:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 295
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      295:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      295:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      295:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      295:  559:    if (deckCounter == 0)
branch  0 taken 191 (fallthrough)
branch  1 taken 104
      191:  560:      return -1;
        -:  561:
      104:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      104:  563:    state->deckCount[player]--;
      104:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    13597:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    13597:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    13597:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    13597:  576:    state->deckCount[player]--;
    13597:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    13701:  580:  return 0;
        -:  581:}
        -:  582:
        -:  583:/*
        -:  584:Card functions live here
        -:  585:*/
        -:  586:
        -:  587://Smithy, with bug introduced 
function smithyEffect called 300 returned 100% blocks executed 100%
      300:  588:int smithyEffect(int currentPlayer, struct gameState *state, int handPos){
        -:  589:  //+3 Cards
      900:  590:  for (int i = 1; i < 3; i++){
branch  0 taken 600
branch  1 taken 300 (fallthrough)
      600:  591:    drawCard(currentPlayer, state);
call    0 returned 600
        -:  592:  }
        -:  593:			
        -:  594:  //discard card from hand
      300:  595:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 300
      300:  596:  return 0;
        -:  597:}
        -:  598:
        -:  599://Adventurer
function adventurerEffect called 50 returned 100% blocks executed 100%
       50:  600:int adventurerEffect(struct gameState *state, int currentPlayer, int drawntreasure, int cardDrawn, int z, int temphand[MAX_HAND]){
        -:  601:    //int temphand[MAX_HAND];// moved above the if statement
    12592:  602:    while(drawntreasure<2){
branch  0 taken 12492
branch  1 taken 50 (fallthrough)
    12492:  603:    	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 241 (fallthrough)
branch  1 taken 12251
      241:  604:    	  shuffle(currentPlayer, state);
call    0 returned 241
        -:  605:    	}
    12492:  606:    	drawCard(currentPlayer, state);
call    0 returned 12492
        -:  607:    	//bug introduced: removed the '-1', this makes it such that the card on the top card in the hand is not the most recently drawn card 
    12492:  608:    	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];//top card of hand is most recently drawn card.
    12492:  609:    	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 12395 (fallthrough)
branch  1 taken 97
branch  2 taken 12394 (fallthrough)
branch  3 taken 1
branch  4 taken 2 (fallthrough)
branch  5 taken 12392
      100:  610:    	  drawntreasure++;
        -:  611:    	else{
    12392:  612:    	  temphand[z]=cardDrawn;
    12392:  613:    	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    12392:  614:    	  z++;
        -:  615:    	}
        -:  616:    }
    12492:  617:    while(z-1>=0){
branch  0 taken 12392
branch  1 taken 50 (fallthrough)
    12392:  618:    	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    12392:  619:    	z=z-1;
        -:  620:      }
       50:  621:    return 0;
        -:  622:}
        -:  623:
function cutpurseEffect called 0 returned 0% blocks executed 0%
    #####:  624:int cutpurseEffect(int currentPlayer, struct gameState *state, int handPos ){
    #####:  625:    updateCoins(currentPlayer, state, 2);
call    0 never executed
        -:  626:    int i, j, k;
    #####:  627:    for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  628:        if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  629:          for (j = 0; j < state->handCount[i]; j++){
branch  0 never executed
branch  1 never executed
    #####:  630:              if (state->hand[i][j] == copper){
branch  0 never executed
branch  1 never executed
        -:  631:                //bug: switch the order of the i and j variable passing
    #####:  632:                  discardCard(i, j, state, 0);
call    0 never executed
    #####:  633:                  break;
        -:  634:                }
    #####:  635:                if (j == state->handCount[i]){
branch  0 never executed
branch  1 never executed
    #####:  636:                  for (k = 0; k < state->handCount[i]; k++){
branch  0 never executed
branch  1 never executed
        -:  637:            	    if (DEBUG)
        -:  638:            	        printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  639:        	        }	
    #####:  640:                  break;
        -:  641:                }		
        -:  642:            }
        -:  643:        			
        -:  644:        }
        -:  645:    		
        -:  646:    }   				
        -:  647:    
        -:  648:    //discard played card from hand
    #####:  649:    discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
    #####:  650:    return 0;
        -:  651:}
        -:  652:
function councilRoomEffect called 100 returned 100% blocks executed 100%
      100:  653:int councilRoomEffect(struct gameState *state, int currentPlayer, int handPos){
        -:  654:  //+4 Cards
        -:  655:  int i;
      500:  656:  for (i = 0; i < 4; i++){
branch  0 taken 400
branch  1 taken 100 (fallthrough)
      400:  657:	  drawCard(currentPlayer, state);
call    0 returned 400
        -:  658:	}
        -:  659:			
        -:  660:    //+1 Buy
      100:  661:    state->numBuys++;
        -:  662:			
        -:  663:    //Each other player draws a card
      404:  664:    for (i = 0; i < state->numPlayers; i++){
branch  0 taken 304
branch  1 taken 100 (fallthrough)
        -:  665:        //bug: switch eval from != to ==
      304:  666:        if ( i == currentPlayer ){
branch  0 taken 100 (fallthrough)
branch  1 taken 204
      100:  667:	      drawCard(i, state);
call    0 returned 100
        -:  668:	    }
        -:  669:	}
        -:  670:			
        -:  671:    //put played card in played card pile
      100:  672:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100
        -:  673:    	
      100:  674:    return 0;
        -:  675:}
        -:  676:
function gardensEffect called 0 returned 0% blocks executed 0%
    #####:  677:int gardensEffect(){
    #####:  678:    return -1;
        -:  679:}
        -:  680:
        -:  681:
function getCost called 100 returned 100% blocks executed 10%
      100:  682:int getCost(int cardNumber)
        -:  683:{
      100:  684:  switch( cardNumber ) 
branch  0 taken 100
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
branch 21 taken 0
branch 22 taken 0
branch 23 taken 0
branch 24 taken 0
branch 25 taken 0
branch 26 taken 0
branch 27 taken 0
        -:  685:    {
        -:  686:    case curse:
      100:  687:      return 0;
        -:  688:    case estate:
    #####:  689:      return 2;
        -:  690:    case duchy:
    #####:  691:      return 5;
        -:  692:    case province:
    #####:  693:      return 8;
        -:  694:    case copper:
    #####:  695:      return 0;
        -:  696:    case silver:
    #####:  697:      return 3;
        -:  698:    case gold:
    #####:  699:      return 6;
        -:  700:    case adventurer:
    #####:  701:      return 6;
        -:  702:    case council_room:
    #####:  703:      return 5;
        -:  704:    case feast:
    #####:  705:      return 4;
        -:  706:    case gardens:
    #####:  707:      return 4;
        -:  708:    case mine:
    #####:  709:      return 5;
        -:  710:    case remodel:
    #####:  711:      return 4;
        -:  712:    case smithy:
    #####:  713:      return 4;
        -:  714:    case village:
    #####:  715:      return 3;
        -:  716:    case baron:
    #####:  717:      return 4;
        -:  718:    case great_hall:
    #####:  719:      return 3;
        -:  720:    case minion:
    #####:  721:      return 5;
        -:  722:    case steward:
    #####:  723:      return 3;
        -:  724:    case tribute:
    #####:  725:      return 5;
        -:  726:    case ambassador:
    #####:  727:      return 3;
        -:  728:    case cutpurse:
    #####:  729:      return 4;
        -:  730:    case embargo: 
    #####:  731:      return 2;
        -:  732:    case outpost:
    #####:  733:      return 5;
        -:  734:    case salvager:
    #####:  735:      return 4;
        -:  736:    case sea_hag:
    #####:  737:      return 4;
        -:  738:    case treasure_map:
    #####:  739:      return 4;
        -:  740:    }
        -:  741:	
    #####:  742:  return -1;
        -:  743:}
        -:  744:
function cardEffect called 400 returned 100% blocks executed 13%
      400:  745:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  746:{
        -:  747:  int i;
        -:  748:  int j;
        -:  749:  //int k;
        -:  750:  int x;
        -:  751:  int index;
      400:  752:  int currentPlayer = whoseTurn(state);
call    0 returned 400
      400:  753:  int nextPlayer = currentPlayer + 1;
        -:  754:
      400:  755:  int tributeRevealedCards[2] = {-1, -1};
        -:  756:  int temphand[MAX_HAND];// moved above the if statement
      400:  757:  int drawntreasure=0;
      400:  758:  int cardDrawn = 0; // intialized to 0
      400:  759:  int z = 0;// this is the counter for the temp hand
      400:  760:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 143 (fallthrough)
branch  1 taken 257
      143:  761:    nextPlayer = 0;
        -:  762:  }
        -:  763:  
        -:  764:	
        -:  765:  //uses switch to select card and perform actions
      400:  766:  switch( card ){
branch  0 taken 50
branch  1 taken 50
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 300
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  767:    case adventurer:
       50:  768:        adventurerEffect(state, currentPlayer, drawntreasure, cardDrawn, z, temphand);
call    0 returned 50
        -:  769:			
        -:  770:    case council_room:
      100:  771:      councilRoomEffect(state, currentPlayer, handPos);
call    0 returned 100
        -:  772:			
        -:  773:    case feast:
        -:  774:      //gain card with cost up to 5
        -:  775:      //Backup hand
    12547:  776:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 12447
branch  1 taken 100 (fallthrough)
    12447:  777:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    12447:  778:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  779:      }
        -:  780:      //Backup hand
        -:  781:      
        -:  782:      //Update Coins for Buy
      100:  783:      updateCoins(currentPlayer, state, 5);
call    0 returned 100
      100:  784:      x = 1;//Condition to loop on
      300:  785:      while( x == 1) { //Buy one card
branch  0 taken 100
branch  1 taken 100 (fallthrough)
      100:  786:        if (supplyCount(choice1, state) <= 0){
call    0 returned 100
branch  1 taken 100 (fallthrough)
branch  2 taken 0
        -:  787:          if (DEBUG){
        -:  788:            printf("None of that card left, sorry!\n");
        -:  789:          }
        -:  790:          
        -:  791:          if (DEBUG){
        -:  792:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  793:          }
        -:  794:        }
      100:  795:        else if (state->coins < getCost(choice1)){
call    0 returned 100
branch  1 taken 0 (fallthrough)
branch  2 taken 100
    #####:  796:          printf("That card is too expensive!\n");
call    0 never executed
        -:  797:          
        -:  798:          if (DEBUG){
        -:  799:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  800:          }
        -:  801:        }
        -:  802:        else{
        -:  803:        
        -:  804:          if (DEBUG){
        -:  805:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  806:          }
        -:  807:          
      100:  808:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 returned 100
      100:  809:          x = 0;//No more buying cards
        -:  810:          
        -:  811:          if (DEBUG){
        -:  812:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  813:          }
        -:  814:        
        -:  815:        }
        -:  816:      }     
        -:  817:      
        -:  818:      //Reset Hand
    12547:  819:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 taken 12447
branch  1 taken 100 (fallthrough)
    12447:  820:      state->hand[currentPlayer][i] = temphand[i];
    12447:  821:      temphand[i] = -1;
        -:  822:      }
        -:  823:      //Reset Hand
        -:  824:      		
      100:  825:      return 0;
        -:  826:			
        -:  827:    case gardens:
    #####:  828:      gardensEffect();
call    0 never executed
        -:  829:			
        -:  830:    case mine:
    #####:  831:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  832:
    #####:  833:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:		
    #####:  838:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  844:	{
    #####:  845:	  return -1;
        -:  846:	}
        -:  847:
    #####:  848:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  849:
        -:  850:      //discard card from hand
    #####:  851:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  852:
        -:  853:      //discard trashed card
    #####:  854:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  855:	{
    #####:  856:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  857:	    {
    #####:  858:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  859:	      break;
        -:  860:	    }
        -:  861:	}
        -:  862:			
    #####:  863:      return 0;
        -:  864:			
        -:  865:    case remodel:
    #####:  866:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  867:
    #####:  868:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  869:	{
    #####:  870:	  return -1;
        -:  871:	}
        -:  872:
    #####:  873:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  874:
        -:  875:      //discard card from hand
    #####:  876:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  877:
        -:  878:      //discard trashed card
    #####:  879:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  880:	{
    #####:  881:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  882:	    {
    #####:  883:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  884:	      break;
        -:  885:	    }
        -:  886:	}
        -:  887:
        -:  888:
    #####:  889:      return 0;
        -:  890:		
        -:  891:    case smithy:
      300:  892:      smithyEffect(currentPlayer, state, handPos );
call    0 returned 300
        -:  893:		
        -:  894:    case village:
        -:  895:      //+1 Card
      300:  896:      drawCard(currentPlayer, state);
call    0 returned 300
        -:  897:			
        -:  898:      //+2 Actions
      300:  899:      state->numActions = state->numActions + 2;
        -:  900:			
        -:  901:      //discard played card from hand
      300:  902:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 300
      300:  903:      return 0;
        -:  904:		
        -:  905:    case baron:
    #####:  906:      state->numBuys++;//Increase buys by 1!
    #####:  907:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  908:	int p = 0;//Iterator for hand!
    #####:  909:	int card_not_discarded = 1;//Flag for discard set!
    #####:  910:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  911:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  912:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  913:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  914:	    state->discardCount[currentPlayer]++;
    #####:  915:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  916:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  917:	    }
    #####:  918:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  919:	    state->handCount[currentPlayer]--;
    #####:  920:	    card_not_discarded = 0;//Exit the loop
        -:  921:	  }
    #####:  922:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  923:	    if(DEBUG) {
        -:  924:	      printf("No estate cards in your hand, invalid choice\n");
        -:  925:	      printf("Must gain an estate if there are any\n");
        -:  926:	    }
    #####:  927:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  928:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  929:	      state->supplyCount[estate]--;//Decrement estates
    #####:  930:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  931:		isGameOver(state);
call    0 never executed
        -:  932:	      }
        -:  933:	    }
    #####:  934:	    card_not_discarded = 0;//Exit the loop
        -:  935:	  }
        -:  936:			    
        -:  937:	  else{
    #####:  938:	    p++;//Next card
        -:  939:	  }
        -:  940:	}
        -:  941:      }
        -:  942:			    
        -:  943:      else{
    #####:  944:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  945:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  946:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  947:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  948:	    isGameOver(state);
call    0 never executed
        -:  949:	  }
        -:  950:	}
        -:  951:      }
        -:  952:	    
        -:  953:      
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case great_hall:
        -:  957:      //+1 Card
    #####:  958:      drawCard(currentPlayer, state);
call    0 never executed
        -:  959:			
        -:  960:      //+1 Actions
    #####:  961:      state->numActions++;
        -:  962:			
        -:  963:      //discard card from hand
    #####:  964:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  965:      return 0;
        -:  966:		
        -:  967:    case minion:
        -:  968:      //+1 action
    #####:  969:      state->numActions++;
        -:  970:			
        -:  971:      //discard card from hand
    #####:  972:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  973:			
    #####:  974:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  975:	{
    #####:  976:	  state->coins = state->coins + 2;
        -:  977:	}
        -:  978:			
    #####:  979:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  980:	{
        -:  981:	  //discard hand
    #####:  982:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  983:	    {
    #####:  984:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  985:	    }
        -:  986:				
        -:  987:	  //draw 4
    #####:  988:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  989:	    {
    #####:  990:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  991:	    }
        -:  992:				
        -:  993:	  //other players discard hand and redraw if hand size > 4
    #####:  994:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  995:	    {
    #####:  996:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  997:		{
    #####:  998:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  999:		    {
        -: 1000:		      //discard hand
    #####: 1001:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1002:			{
    #####: 1003:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1004:			}
        -: 1005:							
        -: 1006:		      //draw 4
    #####: 1007:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1008:			{
    #####: 1009:			  drawCard(i, state);
call    0 never executed
        -: 1010:			}
        -: 1011:		    }
        -: 1012:		}
        -: 1013:	    }
        -: 1014:				
        -: 1015:	}
    #####: 1016:      return 0;
        -: 1017:		
        -: 1018:    case steward:
    #####: 1019:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1020:	{
        -: 1021:	  //+2 cards
    #####: 1022:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1023:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1024:	}
    #####: 1025:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1026:	{
        -: 1027:	  //+2 coins
    #####: 1028:	  state->coins = state->coins + 2;
        -: 1029:	}
        -: 1030:      else
        -: 1031:	{
        -: 1032:	  //trash 2 cards in hand
    #####: 1033:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1034:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1035:	}
        -: 1036:			
        -: 1037:      //discard card from hand
    #####: 1038:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1039:      return 0;
        -: 1040:		
        -: 1041:    case tribute:
    #####: 1042:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1043:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1044:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1045:	  state->deckCount[nextPlayer]--;
        -: 1046:	}
    #####: 1047:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1048:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1049:	  state->discardCount[nextPlayer]--;
        -: 1050:	}
        -: 1051:	else{
        -: 1052:	  //No Card to Reveal
        -: 1053:	  if (DEBUG){
        -: 1054:	    printf("No cards to reveal\n");
        -: 1055:	  }
        -: 1056:	}
        -: 1057:      }
        -: 1058:	    
        -: 1059:      else{
    #####: 1060:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1061:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1062:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1063:	    state->deckCount[nextPlayer]++;
    #####: 1064:	    state->discard[nextPlayer][i] = -1;
    #####: 1065:	    state->discardCount[nextPlayer]--;
        -: 1066:	  }
        -: 1067:			    
    #####: 1068:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1069:	} 
    #####: 1070:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1071:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1072:	state->deckCount[nextPlayer]--;
    #####: 1073:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1074:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1075:	state->deckCount[nextPlayer]--;
        -: 1076:      }    
        -: 1077:		       
    #####: 1078:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1079:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1080:	state->playedCardCount++;
    #####: 1081:	tributeRevealedCards[1] = -1;
        -: 1082:      }
        -: 1083:
    #####: 1084:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1085:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1086:	  state->coins += 2;
        -: 1087:	}
        -: 1088:		    
    #####: 1089:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1090:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1091:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1092:	}
        -: 1093:	else{//Action Card
    #####: 1094:	  state->numActions = state->numActions + 2;
        -: 1095:	}
        -: 1096:      }
        -: 1097:	    
    #####: 1098:      return 0;
        -: 1099:		
        -: 1100:    case ambassador:
    #####: 1101:      j = 0;		//used to check if player has enough cards to discard
        -: 1102:
    #####: 1103:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1104:	{
    #####: 1105:	  return -1;				
        -: 1106:	}
        -: 1107:
    #####: 1108:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1109:	{
    #####: 1110:	  return -1;
        -: 1111:	}
        -: 1112:
    #####: 1113:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1114:	{
    #####: 1115:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1116:	    {
    #####: 1117:	      j++;
        -: 1118:	    }
        -: 1119:	}
    #####: 1120:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1121:	{
    #####: 1122:	  return -1;				
        -: 1123:	}
        -: 1124:
        -: 1125:      if (DEBUG) 
        -: 1126:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1127:
        -: 1128:      //increase supply count for choosen card by amount being discarded
    #####: 1129:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1130:			
        -: 1131:      //each other player gains a copy of revealed card
    #####: 1132:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1133:	{
    #####: 1134:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1135:	    {
    #####: 1136:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1137:	    }
        -: 1138:	}
        -: 1139:
        -: 1140:      //discard played card from hand
    #####: 1141:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1142:
        -: 1143:      //trash copies of cards returned to supply
    #####: 1144:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1145:	{
    #####: 1146:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1147:	    {
    #####: 1148:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1149:		{
    #####: 1150:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1151:		  break;
        -: 1152:		}
        -: 1153:	    }
        -: 1154:	}			
        -: 1155:
    #####: 1156:      return 0;
        -: 1157:		
        -: 1158:    case cutpurse:
    #####: 1159:      cutpurseEffect(currentPlayer, state, handPos);
call    0 never executed
        -: 1160:
        -: 1161:		
        -: 1162:    case embargo: 
        -: 1163:      //+2 Coins
    #####: 1164:      state->coins = state->coins + 2;
        -: 1165:			
        -: 1166:      //see if selected pile is in play
    #####: 1167:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1168:	{
    #####: 1169:	  return -1;
        -: 1170:	}
        -: 1171:			
        -: 1172:      //add embargo token to selected supply pile
    #####: 1173:      state->embargoTokens[choice1]++;
        -: 1174:			
        -: 1175:      //trash card
    #####: 1176:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1177:      return 0;
        -: 1178:		
        -: 1179:    case outpost:
        -: 1180:      //set outpost flag
    #####: 1181:      state->outpostPlayed++;
        -: 1182:			
        -: 1183:      //discard card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case salvager:
        -: 1188:      //+1 buy
    #####: 1189:      state->numBuys++;
        -: 1190:			
    #####: 1191:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1192:	{
        -: 1193:	  //gain coins equal to trashed card
    #####: 1194:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1195:	  //trash card
    #####: 1196:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1197:	}
        -: 1198:			
        -: 1199:      //discard card
    #####: 1200:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1201:      return 0;
        -: 1202:		
        -: 1203:    case sea_hag:
    #####: 1204:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1205:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1206:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1207:	  state->discardCount[i]++;
    #####: 1208:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1209:	}
        -: 1210:      }
    #####: 1211:      return 0;
        -: 1212:		
        -: 1213:    case treasure_map:
        -: 1214:      //search hand for another treasure_map
    #####: 1215:      index = -1;
    #####: 1216:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1217:	{
    #####: 1218:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1219:	    {
    #####: 1220:	      index = i;
    #####: 1221:	      break;
        -: 1222:	    }
        -: 1223:	}
    #####: 1224:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1225:	{
        -: 1226:	  //trash both treasure cards
    #####: 1227:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1228:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1229:
        -: 1230:	  //gain 4 Gold cards
    #####: 1231:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1232:	    {
    #####: 1233:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1234:	    }
        -: 1235:				
        -: 1236:	  //return success
    #####: 1237:	  return 1;
        -: 1238:	}
        -: 1239:			
        -: 1240:      //no second treasure_map found in hand
    #####: 1241:      return -1;
        -: 1242:    }
        -: 1243:	
    #####: 1244:  return -1;
        -: 1245:}
        -: 1246:
function discardCard called 700 returned 100% blocks executed 78%
      700: 1247:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1248:{
        -: 1249:	
        -: 1250:  //if card is not trashed, added to Played pile 
      700: 1251:  if (trashFlag < 1)
branch  0 taken 700 (fallthrough)
branch  1 taken 0
        -: 1252:    {
        -: 1253:      //add card to played pile
      700: 1254:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      700: 1255:      state->playedCardCount++;
        -: 1256:    }
        -: 1257:	
        -: 1258:  //set played card to -1
      700: 1259:  state->hand[currentPlayer][handPos] = -1;
        -: 1260:	
        -: 1261:  //remove card from player's hand
      700: 1262:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0 (fallthrough)
branch  1 taken 700
        -: 1263:    {
        -: 1264:      //reduce number of cards in hand
    #####: 1265:      state->handCount[currentPlayer]--;
        -: 1266:    }
      700: 1267:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 700
        -: 1268:    {
        -: 1269:      //reduce number of cards in hand
    #####: 1270:      state->handCount[currentPlayer]--;
        -: 1271:    }
        -: 1272:  else 	
        -: 1273:    {
        -: 1274:      //replace discarded card with last card in hand
      700: 1275:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1276:      //set last card to -1
      700: 1277:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1278:      //reduce number of cards in hand
      700: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:	
      700: 1282:  return 0;
        -: 1283:}
        -: 1284:
function gainCard called 100 returned 100% blocks executed 70%
      100: 1285:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1286:{
        -: 1287:  //Note: supplyPos is enum of choosen card
        -: 1288:	
        -: 1289:  //check if supply pile is empty (0) or card is not used in game (-1)
      100: 1290:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100
branch  1 taken 0 (fallthrough)
branch  2 taken 100
        -: 1291:    {
    #####: 1292:      return -1;
        -: 1293:    }
        -: 1294:	
        -: 1295:  //added card for [whoseTurn] current player:
        -: 1296:  // toFlag = 0 : add to discard
        -: 1297:  // toFlag = 1 : add to deck
        -: 1298:  // toFlag = 2 : add to hand
        -: 1299:
      100: 1300:  if (toFlag == 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 100
        -: 1301:    {
    #####: 1302:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1303:      state->deckCount[player]++;
        -: 1304:    }
      100: 1305:  else if (toFlag == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 100
        -: 1306:    {
    #####: 1307:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1308:      state->handCount[player]++;
        -: 1309:    }
        -: 1310:  else
        -: 1311:    {
      100: 1312:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      100: 1313:      state->discardCount[player]++;
        -: 1314:    }
        -: 1315:	
        -: 1316:  //decrease number in supply pile
      100: 1317:  state->supplyCount[supplyPos]--;
        -: 1318:	 
      100: 1319:  return 0;
        -: 1320:}
        -: 1321:
function updateCoins called 100 returned 100% blocks executed 73%
      100: 1322:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1323:{
        -: 1324:  int i;
        -: 1325:	
        -: 1326:  //reset coin count
      100: 1327:  state->coins = 0;
        -: 1328:
        -: 1329:  //add coins for each Treasure card in player's hand
    12447: 1330:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 12347
branch  1 taken 100 (fallthrough)
        -: 1331:    {
    12347: 1332:      if (state->hand[player][i] == copper)
branch  0 taken 0 (fallthrough)
branch  1 taken 12347
        -: 1333:	{
    #####: 1334:	  state->coins += 1;
        -: 1335:	}
    12347: 1336:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 12347
        -: 1337:	{
    #####: 1338:	  state->coins += 2;
        -: 1339:	}
    12347: 1340:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 12347
        -: 1341:	{
    #####: 1342:	  state->coins += 3;
        -: 1343:	}	
        -: 1344:    }	
        -: 1345:
        -: 1346:  //add bonus
      100: 1347:  state->coins += bonus;
        -: 1348:
      100: 1349:  return 0;
        -: 1350:}
        -: 1351:
        -: 1352:
        -: 1353://end of dominion.c
        -: 1354:
